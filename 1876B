#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <math.h>
#include <iomanip>
 
typedef long long ll;
#define yes cout<<"Yes\n"
#define no cout<<"No\n"
#define endl "\n"
using namespace std;
 
ll gcd(ll a, ll b) {
    while (b != 0) {
        ll temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
 
const int MOD = 998244353;

int add(int x, int y)
{
    return ((x + y) % MOD + MOD) % MOD;
}

int mul(int x, int y)
{
    return x * 1ll * y % MOD;
}

int binpow(int x, int y)
{
    int z = 1;
    while(y)
    {
        if(y % 2 == 1) z = mul(z, x);
        x = mul(x, x);
        y /= 2;
    }
    return z;
}

int inv(int x)
{
    return binpow(x, MOD - 2);
}

int divide(int x, int y)
{
    return mul(x, inv(y));
}

vector<int> findAllDivisors(int n) {
    vector<int> divisors;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) { // Check to avoid adding the square root twice
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}

/*
void solve(){
    ll n;
    cin>>n;
    vector<ll> a(n+1);
    for(ll i=1;i<=n;++i) cin>>a[i];
    vector<ll> b(n+1);
    ll ans1, ans2;
 
    ll front=n, back=1;
    for(ll i=1;i<n;++i){
        if(a[i+1]<a[i]){
            front=i;
        }
    }
    for(ll i=n-1;i>=1;--i){
        if(a[i]<a[i-1]){
            back=i;
        }
    }
    if(front>=back) ans1=0;
    if(back-front>1) ans1=-1;
    if(back-front==1){
        if(a[n]>a[1]) ans1=-1;
        ans1=min(n-back+1, front+2);
    }
    
    
    for(ll i=1;i<=n;++i){
        b[i]=a[n-i+1];
    }
    ll front2=n, back2=1;
    for(ll i=1;i<n;++i){
        if(b[i+1]>b[i]){
            front2=i;
        }
    }
    for(ll i=n-1;i>=1;--i){
        if(b[i]>b[i-1]){
            back2=i;
        }
    }
    if(front2>=back2) ans2=1;
    if(back2-front2>1) ans2=-1;
    if(back2-front2==1){
        if(b[n]<b[1]) ans2=-1;
        ans2=min(n-back+2, front+1);
    }
    if(ans1==-1 && ans2==-1){
        cout<<-1<<endl;
    }else if(ans1==-1){
        cout<<ans2<<endl;
    }else if(ans2==-1){
        cout<<ans1<<endl;
    }else{
        cout<<min(ans1,ans2)<<endl;
    }
}*/



int32_t main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin>>n;
    vector<int> store(n+1,-1);
    for(int i=1;i<=n;++i){
        int x;
        cin>>x;
        vector<int> divs=findAllDivisors(i);
        for(auto e:divs){
            store[e]=max(store[e],x);
        }
    }
    int ans=0;
    sort(store.begin()+1, store.end());
    for(int i=1;i<=n;++i){
        ans=add(ans, mul(store[i], binpow(2, i-1)));
    }
    cout<<ans<<endl;
    return 0;
}




