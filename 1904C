#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <math.h>
#include <iomanip>
 
typedef long long ll;
#define yes cout<<"Yes\n"
#define no cout<<"No\n"
#define endl "\n"
using namespace std;
 
ll gcd(ll a, ll b) {
    while (b != 0) {
        ll temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
 
const int MOD = 998244353;
 
int add(int x, int y)
{
    return ((x + y) % MOD + MOD) % MOD;
}
 
int mul(int x, int y)
{
    return x * 1ll * y % MOD;
}
 
int binpow(int x, int y)
{
    int z = 1;
    while(y)
    {
        if(y % 2 == 1) z = mul(z, x);
        x = mul(x, x);
        y /= 2;
    }
    return z;
}
 
int inv(int x)
{
    return binpow(x, MOD - 2);
}
 
int divide(int x, int y)
{
    return mul(x, inv(y));
}
/*
vector<int> findAllDivisors(int n) {
    vector<int> divisors;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) { // Check to avoid adding the square root twice
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}
 
 
void solve(){
   ll n,k;
   cin>>n>>k;
   vector<ll> a(n+1);
   ll mn;
   for(ll i=1;i<=n;++i){
       cin>>a[i];
       if(i==1){
           mn=a[i];
       }else{
           mn=min(mn, a[i]);
       }
   
   }
   sort(a.begin()+1, a.end());
   if(k>=3){
       cout<<0<<endl;
   }else if(k==1){
       for(ll i=2;i<=n;++i){
           mn=min(mn, a[i]-a[i-1]);
       }
       cout<<mn<<endl;
   }else{
       for(ll i=2;i<=n;++i){
           mn=min(mn, a[i]-a[i-1]);
       }
       for(ll i=1;i<=n;++i){
           for(ll j=1;j<i;++j){
               ll v=a[i]-a[j];
               ll p=lower_bound(begin(a)+1,end(a),v)-begin(a)-1;
               if(p<=n) mn=min(mn,abs(a[p]-v));
               if(p>1) mn=min(mn, abs(v-a[p-1]));
           }
       }
       cout<<mn<<endl;
   }
}
 
int32_t main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}*/
#define int long long
 
signed main() {
    int t;
    cin >> t;
    while (t--) {
        int n, k;
        cin >> n >> k;
        vector<int> a(n);
        for (int i = 0; i < n; i++) cin >> a[i];
        if (k >= 3) {
            cout << 0 << endl;
            continue;
        }
        sort(begin(a), end(a));
        int d = a[0];
        for (int i = 0; i < n - 1; i++) d = min(d, a[i + 1] - a[i]);
        if (k == 1) {
            cout << d << endl;
            continue;
        }
        for (int i = 0; i < n; i++) for (int j = 0; j < i; j++) {
            int v = a[i] - a[j];
            int p = lower_bound(begin(a), end(a), v) - begin(a);
            if (p < n) d = min(d, a[p] - v);
            if (p > 0) d = min(d, v - a[p - 1]);
        }
        cout << d << endl;
    }
}
