#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <stack>
#include <queue>
#include <math.h>
#include <iomanip>
 
typedef long long ll;
#define yes cout<<"Yes\n"
#define no cout<<"No\n"
#define endl "\n"
using namespace std;
 
ll gcd(ll a, ll b) {
    while (b != 0) {
        ll temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
 
const int MOD = 998244353;
 
int add(int x, int y)
{
    return ((x + y) % MOD + MOD) % MOD;
}
 
int mul(int x, int y)
{
    return x * 1ll * y % MOD;
}
 
int binpow(int x, int y)
{
    int z = 1;
    while(y)
    {
        if(y % 2 == 1) z = mul(z, x);
        x = mul(x, x);
        y /= 2;
    }
    return z;
}
 
int inv(int x)
{
    return binpow(x, MOD - 2);
}
 
int divide(int x, int y)
{
    return mul(x, inv(y));
}
 
vector<int> findAllDivisors(int n) {
    vector<int> divisors;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            divisors.push_back(i);
            if (i != n / i) { // Check to avoid adding the square root twice
                divisors.push_back(n / i);
            }
        }
    }
    return divisors;
}
 
int check(int m,int n, int x, int y,int aa,int bb){
    if((abs(m-x)==aa && abs(n-y)==bb) || (abs(m-x)==bb && abs(n-y)==aa)){
        return 1;
    }else{
        return 0;
    }
}
 
void solve(){
    int a,b,xk,yk,xq,yq;
    cin>>a>>b>>xk>>yk>>xq>>yq;
    int ans=0;
    if(a==b){
        int cx=xk+a;int cy=yk+b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk+a;cy=yk-b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-a;cy=yk+b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-a;cy=yk-b;
        ans+=check(cx,cy,xq,yq,a,b);
    }else{
        int cx=xk+a;int cy=yk+b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk+a;cy=yk-b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-a;cy=yk+b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-a;cy=yk-b;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk+b;cy=yk+a;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk+b;cy=yk-a;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-b;cy=yk+a;
        ans+=check(cx,cy,xq,yq,a,b);
        cx=xk-b;cy=yk-a;
        ans+=check(cx,cy,xq,yq,a,b);
    }
    cout<<ans<<endl;
 
}
 
int32_t main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
 
