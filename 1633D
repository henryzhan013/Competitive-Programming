#include <iostream>
#include <vector>

using namespace std;
typedef long long ll;

ll knapsack(ll W, const vector<ll> &wt, const vector<ll> &val, ll n) {
    vector<ll> dp(W+1,0);
    for(ll i=1;i<=n;++i){
        for(ll w=W;w>=wt[i];--w){
            dp[w]=max(dp[w],dp[w-wt[i]]+val[i]);
        }
    }
    return dp[W];
}


void solve(){
    ll n,k;
    cin>>n>>k;
    vector<ll> b(n+1),c(n+1),ww(n+1);
    ll maxb=-1;
    for(ll i=1;i<=n;++i) {
        cin>>b[i];
        if(b[i]>maxb) maxb=b[i];
    }
    for(ll i=1;i<=n;++i) cin>>c[i];
    vector<ll> dp2(maxb*2+5, 50);
    dp2[1]=0;
    for(ll i=1;i<=maxb;++i){
        ll x=1;
        while(x<=i){
            dp2[i+i/x]=min(dp2[i+i/x], dp2[i]+1);
            x++;
        }
    }
    for(ll i=1;i<=n;i++) ww[i]=dp2[b[i]];
    cout<<knapsack(min(k,12*n),ww,c,n)<<"\n";
}
 
int main(){
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}
